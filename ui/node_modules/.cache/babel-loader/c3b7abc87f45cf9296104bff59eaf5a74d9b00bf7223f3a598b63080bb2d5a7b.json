{"ast":null,"code":"var _jsxFileName = \"D:\\\\Urban-Public-Transport-Analysis-Service\\\\ui\\\\src\\\\components\\\\polygonForm\\\\polygonForm.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport styles from './PolygonForm.module.css';\nimport * as yup from 'yup';\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet shape = yup.object().shape({\n  polygon: yup.string().required()\n});\n\n// строка вида (x;y) (x;y) ... (x;y)\nfunction parser(str) {\n  if (str[0] !== '(' || str.at(-1) !== ')') {\n    return null;\n  }\n  let semicolon = str.indexOf(';', 1);\n  if (semicolon === -1) {\n    return null;\n  }\n  let currentIndex = 0;\n  let leftBracket = str.indexOf('(');\n  if (leftBracket === -1) {\n    return null;\n  }\n  let result = [];\n  while (leftBracket !== -1) {\n    let rightBracket = str.indexOf(')', currentIndex);\n    if (rightBracket === -1) {\n      return null;\n    }\n    let x1 = leftBracket + 1;\n    let x2 = str.indexOf(';', currentIndex);\n    let x = parseFloat(str.slice(x1, x2));\n    let y1 = x2 + 1;\n    let y2 = rightBracket;\n    let y = parseFloat(str.slice(y1, y2));\n    result.push([x, y]);\n    currentIndex = rightBracket + 1;\n    leftBracket = str.indexOf('(', currentIndex);\n  }\n  console.log(result);\n  return result;\n}\nfunction PolygonForm() {\n  _s();\n  const [polygon, setPolygon] = useState('');\n  const navigate = useNavigate();\n  let dataToApp = {\n    type: \"Polygon\",\n    dataArr: []\n  };\n  async function validateForm() {\n    let dataObject = {\n      polygon: polygon\n    };\n    const isValid = await shape.isValid(dataObject);\n    if (!isValid) {\n      alert(\"Заполните все поля.\");\n    } else {\n      //parser(polygon);\n      let data = parser(polygon);\n      //let data = null;\n      if (data === null) {\n        alert(\"Заполните поле согласно шаблону.\");\n      } else {\n        dataToApp.dataArr = [];\n        dataToApp.dataArr.push(data);\n        navigate('/app', {\n          state: dataToApp\n        });\n      }\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: styles.form,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Polygon\",\n      onChange: e => setPolygon(e.target.value),\n      value: polygon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: styles.btn,\n      onClick: validateForm,\n      children: \"Apply\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n_s(PolygonForm, \"yImgUbExhJr1Y5qNyln4k3QiUgc=\", false, function () {\n  return [useNavigate];\n});\n_c = PolygonForm;\nexport default PolygonForm;\nvar _c;\n$RefreshReg$(_c, \"PolygonForm\");","map":{"version":3,"names":["React","useState","styles","yup","useNavigate","jsxDEV","_jsxDEV","shape","object","polygon","string","required","parser","str","at","semicolon","indexOf","currentIndex","leftBracket","result","rightBracket","x1","x2","x","parseFloat","slice","y1","y2","y","push","console","log","PolygonForm","_s","setPolygon","navigate","dataToApp","type","dataArr","validateForm","dataObject","isValid","alert","data","state","className","form","children","placeholder","onChange","e","target","value","fileName","_jsxFileName","lineNumber","columnNumber","btn","onClick","_c","$RefreshReg$"],"sources":["D:/Urban-Public-Transport-Analysis-Service/ui/src/components/polygonForm/polygonForm.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport styles from './PolygonForm.module.css'\r\nimport * as yup from 'yup'\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nlet shape = yup.object().shape({\r\n    polygon: yup.string().required(),\r\n})\r\n\r\n\r\n// строка вида (x;y) (x;y) ... (x;y)\r\nfunction parser(str) {\r\n    if (str[0] !== '(' || str.at(-1) !== ')') {\r\n        return null;\r\n    }\r\n    let semicolon = str.indexOf(';', 1);\r\n    if (semicolon === -1) {\r\n        return null;\r\n    }\r\n    let currentIndex = 0;\r\n    let leftBracket = str.indexOf('(');\r\n    if (leftBracket === -1) {\r\n        return null\r\n    }\r\n\r\n    let result = [];\r\n    while (leftBracket !== -1) {\r\n        let rightBracket = str.indexOf(')', currentIndex);\r\n        if (rightBracket === -1) {\r\n            return null;\r\n        }\r\n        let x1 = leftBracket + 1;\r\n        let x2 = str.indexOf(';', currentIndex);\r\n        let x = parseFloat(str.slice(x1, x2));\r\n\r\n        let y1 = x2 + 1;\r\n        let y2 = rightBracket;\r\n        let y = parseFloat(str.slice(y1, y2));\r\n        result.push([x, y]);\r\n\r\n        currentIndex = rightBracket + 1;\r\n        leftBracket = str.indexOf('(', currentIndex);\r\n    }\r\n\r\n    console.log(result);\r\n    return result;\r\n}\r\n\r\n\r\nfunction PolygonForm() {\r\n    const [polygon, setPolygon] = useState('')\r\n    const navigate = useNavigate()\r\n\r\n    let dataToApp = {type : \"Polygon\", dataArr: []}\r\n\r\n    async function validateForm() {\r\n        let dataObject = {\r\n            polygon: polygon,\r\n        };\r\n\r\n        const isValid = await shape.isValid(dataObject);\r\n    \r\n        if (!isValid) {\r\n            alert(\"Заполните все поля.\");\r\n        }\r\n        else {\r\n            //parser(polygon);\r\n            let data = parser(polygon);\r\n            //let data = null;\r\n            if (data === null) {\r\n                alert(\"Заполните поле согласно шаблону.\");\r\n            }\r\n            else {\r\n                dataToApp.dataArr = [];\r\n                dataToApp.dataArr.push(data);\r\n                navigate('/app', {state: dataToApp})\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <form className={styles.form}>\r\n            <input placeholder=\"Polygon\" onChange={e => setPolygon(e.target.value)} value={polygon}></input>\r\n            <button type='button' className={styles.btn} onClick={validateForm} >Apply</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PolygonForm"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}